/* automatically generated by rust-bindgen 0.59.2 */

pub const CSR_FFLAGS: u32 = 1;
pub const CSR_FRM: u32 = 2;
pub const CSR_FCSR: u32 = 3;
pub const CSR_CYCLE: u32 = 3072;
pub const CSR_TIME: u32 = 3073;
pub const CSR_INSTRET: u32 = 3074;
pub const CSR_SSTATUS: u32 = 256;
pub const CSR_SIE: u32 = 260;
pub const CSR_STVEC: u32 = 261;
pub const CSR_SCOUNTEREN: u32 = 262;
pub const CSR_SENVCFG: u32 = 266;
pub const CSR_SSCRATCH: u32 = 320;
pub const CSR_SEPC: u32 = 321;
pub const CSR_SCAUSE: u32 = 322;
pub const CSR_STVAL: u32 = 323;
pub const CSR_SIP: u32 = 324;
pub const CSR_SATP: u32 = 384;
pub const SATP_MODE_BARE: u32 = 0;
pub const SATP_MODE_SV32: u32 = 2147483648;
pub const SATP_ASID_SHIFT: u32 = 22;
pub const SATP_ASID_SIZE: u32 = 9;
pub const CSR_MVENDORID: u32 = 3857;
pub const CSR_MARCHID: u32 = 3858;
pub const CSR_MIMPID: u32 = 3859;
pub const CSR_MHARTID: u32 = 3860;
pub const CSR_MCONFIGPTR: u32 = 3861;
pub const CSR_MSTATUS: u32 = 768;
pub const CSR_MISA: u32 = 769;
pub const CSR_MEDELEG: u32 = 770;
pub const CSR_MIDELEG: u32 = 771;
pub const CSR_MIE: u32 = 772;
pub const CSR_MTVEC: u32 = 773;
pub const CSR_MCOUNTEREN: u32 = 775;
pub const CSR_MSTATUSH: u32 = 784;
pub const CSR_MSCRATCH: u32 = 832;
pub const CSR_MEPC: u32 = 833;
pub const CSR_MCAUSE: u32 = 834;
pub const CSR_MTVAL: u32 = 835;
pub const CSR_MIP: u32 = 836;
pub const CSR_MTINST: u32 = 842;
pub const CSR_MTVAL2: u32 = 843;
pub const CSR_MENVCFG: u32 = 778;
pub const CSR_MCYCLE: u32 = 2816;
pub const CSR_MINSTRET: u32 = 2818;
pub const MSTATUS_TSR: u32 = 4194304;
pub const MSTATUS_TW: u32 = 2097152;
pub const MSTATUS_TVM: u32 = 1048576;
pub const MSTATUS_MPRV: u32 = 131072;
pub const MSTATUS_MPP: u32 = 6144;
pub const MSTATUS_MPIE: u32 = 128;
pub const MSTATUS_MIE: u32 = 8;
pub const MSTATUS_MPP_SHIFT: u32 = 11;
pub const SSTATUS_SD: u32 = 2147483648;
pub const SSTATUS_MXR: u32 = 524288;
pub const SSTATUS_SUM: u32 = 262144;
pub const SSTATUS_XS: u32 = 98304;
pub const SSTATUS_FS: u32 = 24576;
pub const SSTATUS_SPP: u32 = 256;
pub const SSTATUS_UBE: u32 = 64;
pub const SSTATUS_SPIE: u32 = 32;
pub const SSTATUS_SIE: u32 = 2;
pub const SSTATUS_XS_SHIFT: u32 = 15;
pub const SSTATUS_FS_SHIFT: u32 = 13;
pub const SSTATUS_SPP_SHIFT: u32 = 8;
pub const PRIV_U: u32 = 0;
pub const PRIV_S: u32 = 1;
pub const PRIV_M: u32 = 3;
pub const INTn_SVC_SW: u32 = 1;
pub const INTn_MACH_SW: u32 = 3;
pub const INTn_SVC_TIMER: u32 = 5;
pub const INTn_MACH_TIMER: u32 = 7;
pub const INTn_SVC_EXTERN: u32 = 9;
pub const INTn_MACH_EXTERN: u32 = 11;
pub const INTb_SVC_SW: u32 = 2;
pub const INTb_MACH_SW: u32 = 8;
pub const INTb_SVC_TIMER: u32 = 32;
pub const INTb_MACH_TIMER: u32 = 128;
pub const INTb_SVC_EXTERN: u32 = 512;
pub const INTb_MACH_EXTERN: u32 = 2048;
pub const EXCn_INSTR_ADDR_MISALIGN: u32 = 0;
pub const EXCn_INSTR_ACCESS_FAULT: u32 = 1;
pub const EXCn_ILLEGAL_INSTR: u32 = 2;
pub const EXCn_BREAKPOINT: u32 = 3;
pub const EXCn_LOAD_ADDR_MISALIGN: u32 = 4;
pub const EXCn_LOAD_ADDR_FAULT: u32 = 5;
pub const EXCn_STORE_ADDR_MISALIGN: u32 = 6;
pub const EXCn_STORE_ADDR_FAULT: u32 = 7;
pub const EXCn_ECALL_UMODE: u32 = 8;
pub const EXCn_ECALL_SMODE: u32 = 9;
pub const EXCn_ECALL_MMODE: u32 = 11;
pub const EXCn_INSTR_PAGE_FAULT: u32 = 12;
pub const EXCn_LOAD_PAGE_FAULT: u32 = 13;
pub const EXCn_STORE_PAGE_FAULT: u32 = 15;
pub const EXCb_INSTR_ADDR_MISALIGN: u32 = 1;
pub const EXCb_INSTR_ACCESS_FAULT: u32 = 2;
pub const EXCb_ILLEGAL_INSTR: u32 = 4;
pub const EXCb_BREAKPOINT: u32 = 8;
pub const EXCb_LOAD_ADDR_MISALIGN: u32 = 16;
pub const EXCb_LOAD_ADDR_FAULT: u32 = 32;
pub const EXCb_STORE_ADDR_MISALIGN: u32 = 64;
pub const EXCb_STORE_ADDR_FAULT: u32 = 128;
pub const EXCb_ECALL_UMODE: u32 = 256;
pub const EXCb_ECALL_SMODE: u32 = 512;
pub const EXCb_ECALL_MMODE: u32 = 2048;
pub const EXCb_INSTR_PAGE_FAULT: u32 = 4096;
pub const EXCb_LOAD_PAGE_FAULT: u32 = 8192;
pub const EXCb_STORE_PAGE_FAULT: u32 = 32768;
pub const PMP_CFG_LOCK: u32 = 128;
pub const PMP_CFG_A_OFF: u32 = 0;
pub const PMP_CFG_A_TOR: u32 = 8;
pub const PMP_CFG_A_NA4: u32 = 16;
pub const PMP_CFG_A_NAPOT: u32 = 24;
pub const PMP_CFG_X: u32 = 4;
pub const PMP_CFG_W: u32 = 2;
pub const PMP_CFG_R: u32 = 1;
pub const PTE_V: u32 = 1;
pub const PTE_R: u32 = 2;
pub const PTE_W: u32 = 4;
pub const PTE_X: u32 = 8;
pub const PTE_U: u32 = 16;
pub const PTE_G: u32 = 32;
pub const PTE_A: u32 = 64;
pub const PTE_D: u32 = 128;
pub const PTE_RSW0: u32 = 256;
pub const PTE_RSW1: u32 = 512;
pub const CSR_M_INTC_ENABLE: u32 = 3008;
pub const CSR_M_INTC_PENDING: u32 = 4032;
pub const CSR_S_INTC_ENABLE: u32 = 2496;
pub const CSR_S_INTC_PENDING: u32 = 3520;
pub const DRAM_BASE: u32 = 1073741824;
pub const FRAMEBUFFER_BASE: u32 = 1086324736;
pub const DRAM_SIZE: u32 = 33554432;
pub const BOOTLOADER_SIZE: u32 = 32768;
pub const ETHMAC_SRAM_BASE: u32 = 3758096384;
pub const ETHMAC_SLOT_SIZE: u32 = 2048;
pub const ETHMAC_RX_SLOTS: u32 = 2;
pub const ETHMAC_TX_SLOTS: u32 = 2;
pub const MMIO_BASE: u32 = 4026531840;
pub const CTRL_BASE: u32 = 4026531840;
pub const IDENT_BASE: u32 = 4026533888;
pub const LEDS_BASE: u32 = 4026535936;
pub const TIMER0_BASE: u32 = 4026540032;
pub const UART0_BASE: u32 = 4026542080;
pub const VFB_BASE: u32 = 4026544128;
pub const VFB_VTG_BASE: u32 = 4026546176;
pub const SPIFLASH_CORE_BASE: u32 = 4026548224;
pub const SPICLASH_PHY_BASE: u32 = 4026550272;
pub const SPISDCARD_BASE: u32 = 4026552320;
pub const ETHMAC_BASE: u32 = 4026554368;
pub const TIMER0_IRQn: u32 = 0;
pub const UART0_IRQn: u32 = 1;
pub const ETHMAC0_IRQn: u32 = 2;
pub const TIMER0_IRQb: u32 = 1;
pub const UART0_IRQb: u32 = 2;
pub const LX_CTRL_RESET: u32 = 0;
pub const LX_CTRL_SCRATCH: u32 = 4;
pub const LX_CTRL_BUS_ERRORS: u32 = 8;
pub const LX_UART_TX: u32 = 0;
pub const LX_UART_RX: u32 = 0;
pub const LX_UART_TXFULL: u32 = 4;
pub const LX_UART_RXEMPTY: u32 = 8;
pub const LX_UART_EV_STATUS: u32 = 12;
pub const LX_UART_EV_PENDING: u32 = 16;
pub const LX_UART_EV_ENABLE: u32 = 20;
pub const LX_UART_TXEMPTY: u32 = 24;
pub const LX_UART_RXFULL: u32 = 28;
pub const LX_UART_MAX: u32 = 256;
pub const LX_UART_EVb_TX: u32 = 1;
pub const LX_UART_EVb_RX: u32 = 2;
pub const LX_TIMER_LOAD: u32 = 0;
pub const LX_TIMER_RELOAD: u32 = 4;
pub const LX_TIMER_EN: u32 = 8;
pub const LX_TIMER_UPDATE_VALUE: u32 = 12;
pub const LX_TIMER_VALUE: u32 = 16;
pub const LX_TIMER_EV_STATUS: u32 = 20;
pub const LX_TIMER_EV_PENDING: u32 = 24;
pub const LX_TIMER_EV_ENABLE: u32 = 28;
pub const LX_TIMER_MAX: u32 = 256;
pub const LX_TIMER_EVb_ZERO: u32 = 1;
pub const LX_VFB_DMA_BASE: u32 = 0;
pub const LX_VFB_DMA_LENGTH: u32 = 4;
pub const LX_VFB_DMA_ENABLE: u32 = 8;
pub const LX_VFB_DMA_DONE: u32 = 12;
pub const LX_VFB_DMA_LOOP: u32 = 16;
pub const LX_VFB_DMA_OFFSET: u32 = 20;
pub const LX_VTG_ENABLE: u32 = 0;
pub const LX_VTG_HRES: u32 = 4;
pub const LX_VTG_HSYNC_START: u32 = 8;
pub const LX_VTG_HSYNC_END: u32 = 12;
pub const LX_VTG_HSCAN: u32 = 16;
pub const LX_VTG_VRES: u32 = 4;
pub const LX_VTG_VSYNC_START: u32 = 8;
pub const LX_VTG_VSYNC_END: u32 = 12;
pub const LX_VTG_VSCAN: u32 = 16;
pub const LX_ETHMAC_WR_SLOT: u32 = 0;
pub const LX_ETHMAC_WR_LEN: u32 = 4;
pub const LX_ETHMAC_WR_ERR: u32 = 8;
pub const LX_ETHMAC_WR_EV_STATUS: u32 = 12;
pub const LX_ETHMAC_WR_EV_PENDING: u32 = 16;
pub const LX_ETHMAC_WR_EV_ENABLE: u32 = 20;
pub const LX_ETHMAC_RD_START: u32 = 24;
pub const LX_ETHMAC_RD_READY: u32 = 28;
pub const LX_ETHMAC_RD_LEVEL: u32 = 32;
pub const LX_ETHMAC_RD_SLOT: u32 = 36;
pub const LX_ETHMAC_RD_LEN: u32 = 40;
pub const LX_ETHMAC_RD_EV_STATUS: u32 = 44;
pub const LX_ETHMAC_RD_EV_PENDING: u32 = 48;
pub const LX_ETHMAC_RD_EV_ENABLE: u32 = 52;
pub const LX_ETHMAC_PRE_CRC: u32 = 56;
pub const LX_ETHMAC_RX_PRE_ERR: u32 = 60;
pub const LX_ETHMAC_RX_CRC_ERR: u32 = 64;
pub const LX_ETHMAC_EVb_WR: u32 = 1;
pub const LX_ETHMAC_EVb_RD: u32 = 1;
pub const LX_ETHPHY_RESET: u32 = 0;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
pub type size_t = cty::c_uint;
pub type wchar_t = cty::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type irqstate_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cframe {
    pub pc: u32,
    pub sp: u32,
    pub gp: u32,
    pub tp: u32,
    pub s0: u32,
    pub s1: u32,
    pub s2: u32,
    pub s3: u32,
    pub s4: u32,
    pub s5: u32,
    pub s6: u32,
    pub s7: u32,
    pub s8: u32,
    pub s9: u32,
    pub s10: u32,
    pub s11: u32,
}
#[test]
fn bindgen_test_layout_cframe() {
    assert_eq!(
        ::core::mem::size_of::<cframe>(),
        64usize,
        concat!("Size of: ", stringify!(cframe))
    );
    assert_eq!(
        ::core::mem::align_of::<cframe>(),
        4usize,
        concat!("Alignment of ", stringify!(cframe))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).pc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).sp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).gp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).tp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(tp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s5 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s6 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s7 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s8 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s9 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s10 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cframe>())).s11 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cframe),
            "::",
            stringify!(s11)
        )
    );
}
pub type cframe_t = cframe;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tframe {
    pub ra: u32,
    pub t0: u32,
    pub t1: u32,
    pub t2: u32,
    pub t3: u32,
    pub t4: u32,
    pub t5: u32,
    pub t6: u32,
    pub a0: u32,
    pub a1: u32,
    pub a2: u32,
    pub a3: u32,
    pub a4: u32,
    pub a5: u32,
    pub a6: u32,
    pub a7: u32,
    pub pc: u32,
    pub sp: u32,
    pub _1: u32,
    pub _2: u32,
}
#[test]
fn bindgen_test_layout_tframe() {
    assert_eq!(
        ::core::mem::size_of::<tframe>(),
        80usize,
        concat!("Size of: ", stringify!(tframe))
    );
    assert_eq!(
        ::core::mem::align_of::<tframe>(),
        4usize,
        concat!("Alignment of ", stringify!(tframe))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).ra as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(ra)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).t0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(t0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).t1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(t1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).t2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(t2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).t3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(t3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).t4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(t4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).t5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(t5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).t6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(t6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a1 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a3 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a4 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a5 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a6 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).a7 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(a7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).pc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>())).sp as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>()))._1 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tframe>()))._2 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tframe),
            "::",
            stringify!(_2)
        )
    );
}
pub type tframe_t = tframe;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eframe {
    pub ra: u32,
    pub t0: u32,
    pub t1: u32,
    pub t2: u32,
    pub t3: u32,
    pub t4: u32,
    pub t5: u32,
    pub t6: u32,
    pub a0: u32,
    pub a1: u32,
    pub a2: u32,
    pub a3: u32,
    pub a4: u32,
    pub a5: u32,
    pub a6: u32,
    pub a7: u32,
    pub pc: u32,
    pub sp: u32,
    pub gp: u32,
    pub tp: u32,
    pub s0: u32,
    pub s1: u32,
    pub s2: u32,
    pub s3: u32,
    pub s4: u32,
    pub s5: u32,
    pub s6: u32,
    pub s7: u32,
    pub s8: u32,
    pub s9: u32,
    pub s10: u32,
    pub s11: u32,
}
#[test]
fn bindgen_test_layout_eframe() {
    assert_eq!(
        ::core::mem::size_of::<eframe>(),
        128usize,
        concat!("Size of: ", stringify!(eframe))
    );
    assert_eq!(
        ::core::mem::align_of::<eframe>(),
        4usize,
        concat!("Alignment of ", stringify!(eframe))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).ra as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(ra)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).t0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(t0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).t1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(t1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).t2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(t2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).t3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(t3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).t4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(t4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).t5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(t5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).t6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(t6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a1 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a3 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a4 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a5 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a6 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).a7 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(a7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).pc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).sp as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).gp as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).tp as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(tp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s0 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s1 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s2 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s3 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s4 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s5 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s6 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s7 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s8 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s9 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s10 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<eframe>())).s11 as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(eframe),
            "::",
            stringify!(s11)
        )
    );
}
pub type eframe_t = eframe;
extern "C" {
    pub fn context_switch(from: *mut cframe_t, to: *mut cframe_t);
}
extern "C" {
    pub fn context_entry();
}
extern "C" {
    pub fn trap_entry();
}
extern "C" {
    pub fn trap_exit();
}
extern "C" {
    pub fn exception_exit();
}
extern "C" {
    pub fn xprint_m_exception(ef: *mut eframe_t);
}
extern "C" {
    pub fn xprint_s_exception(ef: *mut eframe_t);
}
extern "C" {
    pub fn interrupt_handler();
}
extern "C" {
    pub fn exception_handler(ef: *mut eframe_t);
}
