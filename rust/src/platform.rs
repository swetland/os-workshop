/* automatically generated by rust-bindgen 0.59.2 */

pub const CSR_FFLAGS: u32 = 1;
pub const CSR_FRM: u32 = 2;
pub const CSR_FCSR: u32 = 3;
pub const CSR_CYCLE: u32 = 3072;
pub const CSR_TIME: u32 = 3073;
pub const CSR_INSTRET: u32 = 3074;
pub const CSR_SSTATUS: u32 = 256;
pub const CSR_SIE: u32 = 260;
pub const CSR_STVEC: u32 = 261;
pub const CSR_SCOUNTEREN: u32 = 262;
pub const CSR_SENVCFG: u32 = 266;
pub const CSR_SSCRATCH: u32 = 320;
pub const CSR_SEPC: u32 = 321;
pub const CSR_SCAUSE: u32 = 322;
pub const CSR_STVAL: u32 = 323;
pub const CSR_SIP: u32 = 324;
pub const CSR_SATP: u32 = 384;
pub const SATP_MODE_BARE: u32 = 0;
pub const SATP_MODE_SV32: u32 = 2147483648;
pub const SATP_ASID_SHIFT: u32 = 22;
pub const SATP_ASID_SIZE: u32 = 9;
pub const CSR_MVENDORID: u32 = 3857;
pub const CSR_MARCHID: u32 = 3858;
pub const CSR_MIMPID: u32 = 3859;
pub const CSR_MHARTID: u32 = 3860;
pub const CSR_MCONFIGPTR: u32 = 3861;
pub const CSR_MSTATUS: u32 = 768;
pub const CSR_MISA: u32 = 769;
pub const CSR_MEDELEG: u32 = 770;
pub const CSR_MIDELEG: u32 = 771;
pub const CSR_MIE: u32 = 772;
pub const CSR_MTVEC: u32 = 773;
pub const CSR_MCOUNTEREN: u32 = 775;
pub const CSR_MSTATUSH: u32 = 784;
pub const CSR_MSCRATCH: u32 = 832;
pub const CSR_MEPC: u32 = 833;
pub const CSR_MCAUSE: u32 = 834;
pub const CSR_MTVAL: u32 = 835;
pub const CSR_MIP: u32 = 836;
pub const CSR_MTINST: u32 = 842;
pub const CSR_MTVAL2: u32 = 843;
pub const CSR_MENVCFG: u32 = 778;
pub const CSR_MCYCLE: u32 = 2816;
pub const CSR_MINSTRET: u32 = 2818;
pub const MSTATUS_TSR: u32 = 4194304;
pub const MSTATUS_TW: u32 = 2097152;
pub const MSTATUS_TVM: u32 = 1048576;
pub const MSTATUS_MPRV: u32 = 131072;
pub const MSTATUS_MPP: u32 = 6144;
pub const MSTATUS_MPIE: u32 = 128;
pub const MSTATUS_MIE: u32 = 8;
pub const MSTATUS_MPP_SHIFT: u32 = 11;
pub const SSTATUS_SD: u32 = 2147483648;
pub const SSTATUS_MXR: u32 = 524288;
pub const SSTATUS_SUM: u32 = 262144;
pub const SSTATUS_XS: u32 = 98304;
pub const SSTATUS_FS: u32 = 24576;
pub const SSTATUS_SPP: u32 = 256;
pub const SSTATUS_UBE: u32 = 64;
pub const SSTATUS_SPIE: u32 = 32;
pub const SSTATUS_SIE: u32 = 2;
pub const SSTATUS_XS_SHIFT: u32 = 15;
pub const SSTATUS_FS_SHIFT: u32 = 13;
pub const SSTATUS_SPP_SHIFT: u32 = 8;
pub const PRIV_U: u32 = 0;
pub const PRIV_S: u32 = 1;
pub const PRIV_M: u32 = 3;
pub const INTn_SVC_SW: u32 = 1;
pub const INTn_MACH_SW: u32 = 3;
pub const INTn_SVC_TIMER: u32 = 5;
pub const INTn_MACH_TIMER: u32 = 7;
pub const INTn_SVC_EXTERN: u32 = 9;
pub const INTn_MACH_EXTERN: u32 = 11;
pub const INTb_SVC_SW: u32 = 2;
pub const INTb_MACH_SW: u32 = 8;
pub const INTb_SVC_TIMER: u32 = 32;
pub const INTb_MACH_TIMER: u32 = 128;
pub const INTb_SVC_EXTERN: u32 = 512;
pub const INTb_MACH_EXTERN: u32 = 2048;
pub const EXCn_INSTR_ADDR_MISALIGN: u32 = 0;
pub const EXCn_INSTR_ACCESS_FAULT: u32 = 1;
pub const EXCn_ILLEGAL_INSTR: u32 = 2;
pub const EXCn_BREAKPOINT: u32 = 3;
pub const EXCn_LOAD_ADDR_MISALIGN: u32 = 4;
pub const EXCn_LOAD_ADDR_FAULT: u32 = 5;
pub const EXCn_STORE_ADDR_MISALIGN: u32 = 6;
pub const EXCn_STORE_ADDR_FAULT: u32 = 7;
pub const EXCn_ECALL_UMODE: u32 = 8;
pub const EXCn_ECALL_SMODE: u32 = 9;
pub const EXCn_ECALL_MMODE: u32 = 11;
pub const EXCn_INSTR_PAGE_FAULT: u32 = 12;
pub const EXCn_LOAD_PAGE_FAULT: u32 = 13;
pub const EXCn_STORE_PAGE_FAULT: u32 = 15;
pub const EXCb_INSTR_ADDR_MISALIGN: u32 = 1;
pub const EXCb_INSTR_ACCESS_FAULT: u32 = 2;
pub const EXCb_ILLEGAL_INSTR: u32 = 4;
pub const EXCb_BREAKPOINT: u32 = 8;
pub const EXCb_LOAD_ADDR_MISALIGN: u32 = 16;
pub const EXCb_LOAD_ADDR_FAULT: u32 = 32;
pub const EXCb_STORE_ADDR_MISALIGN: u32 = 64;
pub const EXCb_STORE_ADDR_FAULT: u32 = 128;
pub const EXCb_ECALL_UMODE: u32 = 256;
pub const EXCb_ECALL_SMODE: u32 = 512;
pub const EXCb_ECALL_MMODE: u32 = 2048;
pub const EXCb_INSTR_PAGE_FAULT: u32 = 4096;
pub const EXCb_LOAD_PAGE_FAULT: u32 = 8192;
pub const EXCb_STORE_PAGE_FAULT: u32 = 32768;
pub const PMP_CFG_LOCK: u32 = 128;
pub const PMP_CFG_A_OFF: u32 = 0;
pub const PMP_CFG_A_TOR: u32 = 8;
pub const PMP_CFG_A_NA4: u32 = 16;
pub const PMP_CFG_A_NAPOT: u32 = 24;
pub const PMP_CFG_X: u32 = 4;
pub const PMP_CFG_W: u32 = 2;
pub const PMP_CFG_R: u32 = 1;
pub const PTE_V: u32 = 1;
pub const PTE_R: u32 = 2;
pub const PTE_W: u32 = 4;
pub const PTE_X: u32 = 8;
pub const PTE_U: u32 = 16;
pub const PTE_G: u32 = 32;
pub const PTE_A: u32 = 64;
pub const PTE_D: u32 = 128;
pub const PTE_RSW0: u32 = 256;
pub const PTE_RSW1: u32 = 512;
pub const CSR_M_INTC_ENABLE: u32 = 3008;
pub const CSR_M_INTC_PENDING: u32 = 4032;
pub const CSR_S_INTC_ENABLE: u32 = 2496;
pub const CSR_S_INTC_PENDING: u32 = 3520;
pub const DRAM_BASE: u32 = 1073741824;
pub const FRAMEBUFFER_BASE: u32 = 1086324736;
pub const DRAM_SIZE: u32 = 33554432;
pub const BOOTLOADER_SIZE: u32 = 32768;
pub const MMIO_BASE: u32 = 4026531840;
pub const CTRL_BASE: u32 = 4026531840;
pub const IDENT_BASE: u32 = 4026533888;
pub const LEDS_BASE: u32 = 4026535936;
pub const TIMER0_BASE: u32 = 4026540032;
pub const UART0_BASE: u32 = 4026542080;
pub const VFB_BASE: u32 = 4026544128;
pub const VFB_VTG_BASE: u32 = 4026546176;
pub const SPIFLASH_CORE_BASE: u32 = 4026548224;
pub const SPICLASH_PHY_BASE: u32 = 4026550272;
pub const SPISDCARD_BASE: u32 = 4026552320;
pub const TIMER0_IRQn: u32 = 0;
pub const UART0_IRQn: u32 = 1;
pub const TIMER0_IRQb: u32 = 1;
pub const UART0_IRQb: u32 = 2;
pub const LX_CTRL_RESET: u32 = 0;
pub const LX_CTRL_SCRATCH: u32 = 4;
pub const LX_CTRL_BUS_ERRORS: u32 = 8;
pub const LX_UART_TX: u32 = 0;
pub const LX_UART_RX: u32 = 0;
pub const LX_UART_TXFULL: u32 = 4;
pub const LX_UART_RXEMPTY: u32 = 8;
pub const LX_UART_EV_STATUS: u32 = 12;
pub const LX_UART_EV_PENDING: u32 = 16;
pub const LX_UART_EV_ENABLE: u32 = 20;
pub const LX_UART_TXEMPTY: u32 = 24;
pub const LX_UART_RXFULL: u32 = 28;
pub const LX_UART_MAX: u32 = 256;
pub const LX_UART_EVb_TX: u32 = 1;
pub const LX_UART_EVb_RX: u32 = 2;
pub const LX_TIMER_LOAD: u32 = 0;
pub const LX_TIMER_RELOAD: u32 = 4;
pub const LX_TIMER_EN: u32 = 8;
pub const LX_TIMER_UPDATE_VALUE: u32 = 12;
pub const LX_TIMER_VALUE: u32 = 16;
pub const LX_TIMER_EV_STATUS: u32 = 20;
pub const LX_TIMER_EV_PENDING: u32 = 24;
pub const LX_TIMER_EV_ENABLE: u32 = 28;
pub const LX_TIMER_MAX: u32 = 256;
pub const LX_TIMER_EVb_ZERO: u32 = 1;
pub const LX_VFB_DMA_BASE: u32 = 0;
pub const LX_VFB_DMA_LENGTH: u32 = 4;
pub const LX_VFB_DMA_ENABLE: u32 = 8;
pub const LX_VFB_DMA_DONE: u32 = 12;
pub const LX_VFB_DMA_LOOP: u32 = 16;
pub const LX_VFB_DMA_OFFSET: u32 = 20;
pub const LX_VTG_ENABLE: u32 = 0;
pub const LX_VTG_HRES: u32 = 4;
pub const LX_VTG_HSYNC_START: u32 = 8;
pub const LX_VTG_HSYNC_END: u32 = 12;
pub const LX_VTG_HSCAN: u32 = 16;
pub const LX_VTG_VRES: u32 = 4;
pub const LX_VTG_VSYNC_START: u32 = 8;
pub const LX_VTG_VSYNC_END: u32 = 12;
pub const LX_VTG_VSCAN: u32 = 16;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
pub type size_t = cty::c_uint;
pub type wchar_t = cty::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type irqstate_t = u32;
